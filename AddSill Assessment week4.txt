Qus 1: https://leetcode.com/problems/kth-smallest-element-in-a-bst/submissions/
Sol :
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def kthSmallest(self, root, k):
        """
        :type root: TreeNode
        :type k: int
        :rtype: int
        """
        v=[]
        def inorder(root):
            if(root==None):
                return
            inorder(root.left)
            v.append(root.val)
            inorder(root.right)
        inorder(root)
        return v[k-1]
		
Qus 2:https://leetcode.com/problems/validate-binary-search-tree/submissions/
Sol :
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
import sys
class Solution(object):
    def isValidBST(self, root):
        """
        :type root: TreeNode
        :rtype: bool
        """
        global v
        v=[]
        def inorder(root):
            global v
            if(root==None):
                return
            inorder(root.left)
            v.append(root.val)
            inorder(root.right)
        inorder(root)
        print v
        return(v==sorted(list(set(v))))
            
    
        
#         if(root==None):
#             return True
#         low=-sys.maxsize
#         up=sys.maxsize
#         stack=[(root,low,up)]
#         flag=True
#         while(stack!=[] and flag!=False):
#             node,low,up=stack.pop()
            
#             if(node==None):
#                 continue
#             val=node.val
#             print low,up,val
#             if(val>=up or val<=low):
#                 flag=False
#                 continue
#             stack.append((node.right,val,up))
#             stack.append((node.left,low,val))
            
#         return flag

Qus 3:https://leetcode.com/problems/symmetric-tree/submissions/
SOl:
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def isSymmetric(self, root):
        """
        :type root: TreeNode
        :rtype: bool
        """
        if(not root):
            return True
        def ismirror(rootleft,rootright):
            
            
            if(rootleft !=None and  rootright!=None):
                
                return rootleft.val==rootright.val and ismirror(rootleft.left,rootright.right) and ismirror(rootleft.right,rootright.left)
            
            elif(rootleft==None and rootright==None):
                return True
            else:
                return False
        
            
        
        
        
        return ismirror(root.left,root.right)



Qus 4:https://leetcode.com/problems/maximum-width-of-binary-tree/submissions/
Sol:
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
import sys
class Solution(object):
    def widthOfBinaryTree(self, root):
        """
        :type root: TreeNode
        :rtype: int
        """
        if(root==None):
            return 0
        global width
        width=1
        global levels
        levels=[]#this arry will maintain [l,r] min left and max right in the current level
        for i in range(10000):
            levels.append([sys.maxsize,0])
            
        def calc_width(level,left,right):
            global width
            global levels
            #print level
            if(left>sys.maxsize and levels[level][0]==sys.maxsize ):
                levels[level][0]=left
                
                
            l=min(levels[level][0],left)
            if(left<levels[level][0]):
                levels[level][0]=left
            if(right>levels[level][1]):
                levels[level][1]=right

            # print levels
            width=max(width,levels[level][1]-levels[level][0]+1)

        def bfs(root):
           
            stack=[]
            #second argument is pos
            stack.append((root,1,1))
            while(stack!=[]):
                node,level,pos=stack.pop()
                
                #put your logic here
                if(node.left and node.right):
                    # print pos*2, pos*2+1,level
                    calc_width(level+1,pos*2,pos*2+1)
                elif(node.left ):
                    # print "left pos ",pos*2 ,level
                    calc_width(level+1,pos*2,pos*2)
                elif(node.right):
                    # print "right pos ",pos*2+1 ,level
                    calc_width(level+1,pos*2+1,pos*2+1)
                #insert both child node inside stack 
                if(node.left):
                    stack.append((node.left,level+1,pos*2))
                if(node.right):
                    stack.append((node.right,level+1,pos*2+1))
                # print stack
        #complexity O(n)
        bfs(root)
        
      
        return width
		
		
Qus 5: construct a BST inser serch
Sol : deletion should be implemented
class TreeNode(object):
    def __init__(self,x):
        self.key=x
        self.payload=None
        self.left=None
        self.right=None
        self.parent=None
    
class BinaryTree(object):
    def __init__(self,root):
        self.root=root
    
    def printTreeNode(self,root):
        if(root==None):
            return
        self.printTreeNode(root.left)
        print root.key
        self.printTreeNode(root.right)
        
    def InsertVal(self,root,val):
        
        
        if(val<root.key):
            #move left
            if(root.left==None):
                root.left=TreeNode(val)
            else:
                self.InsertVal(root.left,val)
        else:
            #move right
            if(root.right==None):
                root.right=TreeNode(val)
            else:
                self.InsertVal(root.right,val)
                
a=map(int,raw_input().split())

if(len(a)==0):
    pass
else:
    root=TreeNode(a[0])

obj=BinaryTree(root)
for nodeVal in range(1,len(a)):
    obj.InsertVal(obj.root,a[nodeVal])

obj.printTreeNode(root)


Qus 6:Construct a heap ,insert and delete
Sol : deletion should be  modify
print "enter array "
a=map(int,raw_input().split())
heap=[0]
def build_heap(heap,x):
    pos=len(heap)
    heap.append(x)
    while(pos>0):
        if(pos/2>0 and heap[pos/2]>heap[pos]):
            heap[pos/2],heap[pos]=heap[pos],heap[pos/2]
        else:
            break
        pos=pos/2
def heapify(heap):
    i=1
    while(i<len(heap)):
        flag=False
        if(i*2 < len(heap) and heap[i*2]<heap[i]):
            heap[i*2],heap[i]=heap[i],heap[i*2]
            i=i*2
            flag=True
        if(i*2+1<len(heap) and heap[i*2+1]<heap[i]):
            heap[i*2+1],heap[i]=heap[i],heap[i*2+1]
            i=i*2+1
            flag=True
        if(not flag):
            break
        #print heap
        

def remove_min(heap):
    min1=heap[1]
    heap[1]=heap[-1]
    
    heap.pop()
    #print heap
    heapify(heap)

for x in a:
    build_heap(heap,x)
print heap
remove_min(heap)          
print heap

Qus 7:https://leetcode.com/problems/path-sum/submissions/
Sol :


class Solution(object):
    def hasPathSum(self, root, sum):

        global flag
        
        flag=False
        #remember leaf node is a node have both child null
        def has(root,sum,cursum):
            if(root==None):
                return
            global flag
            if(not flag):
                cursum+=root.val
                if(root.left==None and root.right==None):
                    if(cursum==sum):
                        flag=True
                    return 

                has(root.left,sum,cursum)
                has(root.right,sum,cursum)
        
        has(root,sum,0)
        return flag

Qus 8:https://leetcode.com/problems/sum-root-to-leaf-numbers/submissions/
Sol:
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def sumNumbers(self, root):
        
        """
        :type root: TreeNode
        :rtype: int
        """
        if(root==None):
            return 0
        global sum1
        sum1=0
        
        def sumNum(root,total):
            global sum1
            if(root.left==None and root.right==None):
                sum1+=total
            if(root.left):
                sumNum(root.left,total*10+root.left.val)
                
            if(root.right):
                sumNum(root.right,total*10+root.right.val)
            
            
        sumNum(root,root.val)
        return sum1
		
Qus 9:https://leetcode.com/problems/binary-search-tree-iterator/submissions/
Sol:
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class BSTIterator(object):

    def __init__(self, root):
        """
        :type root: TreeNode
        """
    
        self.a=[]
        def inorder(root,a):
            if(root==None):
                return
            inorder(root.left,a)
            a.append(root.val)
            inorder(root.right,a)
            
        inorder(root,self.a)
        self.ptr=0
        
    def next(self):
        """
        @return the next smallest number
        :rtype: int
        """
        #find predecissor and return
        n= self.a[self.ptr]
        self.ptr+=1
        return n
        

    def hasNext(self):
        """
        @return whether we have a next smallest number
        :rtype: bool
        """
        if(self.ptr < len(self.a)):
            return True
        return False


# Your BSTIterator object will be instantiated and called as such:
# obj = BSTIterator(root)
# param_1 = obj.next()
# param_2 = obj.hasNext()

Qus 10:https://leetcode.com/problems/find-median-from-data-stream/solution/
Sol:
import bisect
class MedianFinder(object):

    def __init__(self):
        """
        initialize your data structure here.
        """
        self.a=[]

    def addNum(self, num):
        """
        :type num: int
        :rtype: None
        """
        a=bisect.insort(self.a,num)
        #print self.a
        

    def findMedian(self):
        """
        :rtype: float
        """
        
        if(len(self.a)==0):
            return 0
        if(len(self.a)%2==1):
            return self.a[len(self.a)/2]
        else:
            return ((self.a[len(self.a)/2]+self.a[len(self.a)/2-1])+0.0)/2.0


# Your MedianFinder object will be instantiated and called as such:
# obj = MedianFinder()
# obj.addNum(num)
# param_2 = obj.findMedian()

---
#sol2 using heap see leetcode solution

import bisect
import heapq
class MedianFinder(object):
    def __init__(self):
        """
        initialize your data structure here.
        """
		#always maintain two sorted half having almost equal number of element(max heap might contain 1 extra elemnt in case there are odd number of elemnt) of an array while inserting 
        self.minheap=[]#min heap will be used to contain all 2nd half(having all elemnt greater then lower half of an array)
        self.maxheap=[]#max heap will contain lower half of an array 
        heapq.heapify(self.minheap)
        heapq.heapify(self.maxheap)
        self.n=0

    def addNum(self, num):
        """
        :type num: int
        :rtype: None
        """
		#while inserting element into maxHeap check if  num (elemnt that we need to insert) is greater then root elemnt of min heap then 
		#pop root elemnt of min heap and insert into max heap and insert num into min heap (since we need to maintain equal number of elemnt in both heap and also min heap have all larger elements)
		#else insert num into maxHeap
		
		#while inserting element into minHeap check if  num (elemnt that we need to insert) is smaller then root elemnt of max heap then 
		#pop root elemnt of max heap and insert into min heap and insert num into max heap (since we need to maintain equal number of elemnt in both heap and also min heap have all larger elements)
		#else insert num into minHeap 
		
        if(self.n%2==0):
            if(self.minheap):
                if(num<self.minheap[0]):
                    heapq.heappush(self.maxheap,-num)
                else:
                    heapq.heappush(self.maxheap,-heapq.heappop(self.minheap))
                    heapq.heappush(self.minheap,num)
            else:
                heapq.heappush(self.maxheap,-num)
        else:
            #we have to insert num in minheap
            if(num>-self.maxheap[0]):
                    heapq.heappush(self.minheap,num)
            else:
                heapq.heappush(self.minheap,-heapq.heappop(self.maxheap))
                heapq.heappush(self.maxheap,-num)
            

        self.n+=1

    def findMedian(self):
        """
        :rtype: float
        """
        if(self.n==0):
            return 0
        #if there are odd number of elemnt then root of max will be the median
		#if there are even number of elemnt then (root of maxheap+root of minheap)/2 will be the solution
        if(self.n%2==1):
            return -self.maxheap[0]
        else:
            return ((-self.maxheap[0]+self.minheap[0])+0.0)/2.0


Qus 13:https://leetcode.com/problems/populating-next-right-pointers-in-each-node-ii/submissions/
Sol:
"""
# Definition for a Node.
class Node(object):
    def __init__(self, val=0, left=None, right=None, next=None):
        self.val = val
        self.left = left
        self.right = right
        self.next = next
"""
class Solution(object):
    def connect(self, root):
        """
        :type root: Node
        :rtype: Node
        """
        def dfs(root):
            if(root==None):
                return root
            queue=[]
            queue.append((root,0))
            ans=[]
            while queue:
                
                node,level=queue.pop(0)
                ans.append((node,level))
                if(node.left):
                    queue.append((node.left,level+1))
                if(node.right):
                    queue.append((node.right,level+1))
            root.right==None
            for i in range(1,len(ans)):
                if(ans[i-1][1]!=ans[i][1]):
                    ans[i-1][0].next=None
                    
                else:
                    ans[i-1][0].next=ans[i][0]
                ans[i][0].next=None
            return root

        return dfs(root)
-----

Qus 14:https://leetcode.com/problems/recover-binary-search-tree/submissions/
Sol:

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def recoverTree(self, root):
        """
        :type root: TreeNode
        :rtype: None Do not return anything, modify root in-place instead.
        """
        #a array will store reference of binary search tree in inorder way
        global a
        a=[]
        #this function will build array a
        def inorder(root):
            global a
            if(root==None):
                return 
            inorder(root.left)
            a.append(root)
            inorder(root.right)
        inorder(root)

        
        c=sorted(a,key=lambda x:x.val)
        #print c
        for i in range(len(c)):
            if(c[i].val!=a[i].val):
                    a[i].val,c[i].val=c[i].val,a[i].val
                    break

----slightly different
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def recoverTree(self, root):
        """
        :type root: TreeNode
        :rtype: None Do not return anything, modify root in-place instead.
        """
        #a array will store reference of binary search tree in inorder way
        global a
        a=[]
        #this function will build array a
        def inorder(root):
            global a
            if(root==None):
                return 
            inorder(root.left)
            a.append(root)
            inorder(root.right)
        inorder(root)
        #create a new array having only val of a
        b=[i.val for i in a]
        #c array is to check the difference
        c=sorted(b)
        flag=0
        #if values are not equal then swap
        for i in range(len(c)):
            if(c[i]!=b[i]):
                
                a[i].val=c[i]
				

Qus 14:https://leetcode.com/problems/vertical-order-traversal-of-a-binary-tree/submissions/
Sol:
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
from collections import defaultdict
import bisect
class Solution(object):
    def verticalTraversal(self, root):
        """
        :type root: TreeNode
        :rtype: List[List[int]]
        """
        #I am using dfs because we need vales soted in left to right 
        # then top to bottom
        # if whole position same then sort by val
        def bfs(root):
            d=defaultdict(list)
            queue=[(root,0,0)]
            while(queue):
                node,x,y=queue.pop(0)
                #I am putting values in the dict where key is the x's val and 
                #and val is first y axis and then val 
                #this type of storing will help in sorting based on y axis then val
                bisect.insort(d[x],(y,node.val))
                #d[x].append((y,node.val))
                if(node.left):
                    #I am using y+1 for childen node becuase i want to to sort it in 
                    # accending order
                    queue.append((node.left,x-1,y+1))
                if(node.right):
                    queue.append((node.right,x+1,y+1))
                
            return d
            
        d=bfs(root)
        o=[]
        #remember first sort it by x then y and then val in case x,y are equal
        
        for key in sorted(d.keys()):
            k=d[key]
            p=[]
            
            for i in k:
                p.append(i[1])
            o.append(p)
        #print o
        return o


-------
Qus 15:https://leetcode.com/problems/number-of-operations-to-make-network-connected/
Sol:
from collections import defaultdict
class Solution(object):
    def makeConnected(self, n, connections):
        """
        :type n: int
        :type connections: List[List[int]]
        :rtype: int
        """
        #in case if it can't be minimum spanning tree means less then n-1 edges
        if(len(connections)<n-1):
            return -1
        
        def dfs(graph,i,v):
            stack=[i]
            #print graph
            while(stack):
                #print stack
                node=stack.pop()
                #print node
                v[node]=True
                #print graph[]
                for nei in graph[node]:
                    
                    if(not v[nei]):
                        stack.append(nei)
            return 

        graph=defaultdict(list)
        for i in range(n):
            graph[i]=[]
        for u,v in connections:
            graph[u].append(v)
            graph[v].append(u)
            
        v=[False]*n
        c=0
        #this code is to find number of discunnected components
        for i in range(n):
            if(not v[i]):
                #print v
                #print graph
                c+=1
                dfs(graph,i,v)
                
        #ans is no of disconnected component -1
        return c-1
		
-------
 
Qus 16:https://leetcode.com/problems/house-robber/
Sol:
 class Solution(object):
    def rob(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        if(len(nums)==0):
            return 0
        dp=[0]*(len(nums)+1)
        dp[1]=nums[0]#nums[i-1]
        for i in range(2,len(dp)):
            dp[i]=max(dp[i-1],dp[i-2]+nums[i-1])
        return dp[-1]
		
Qus 17:
Sol:
class Solution(object):
    def rob(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        if(len(nums)==0):
            return 0
        elif(len(nums)<=2):
            return max(nums)
            
        def rob1(nums):
        
            if(len(nums)==0):
                return 0
            dp=[0]*(len(nums)+1)
            dp[1]=nums[0]#nums[i-1]
            for i in range(2,len(dp)):
                dp[i]=max(dp[i-1],dp[i-2]+nums[i-1])
            return dp[-1]
        return max(rob1(nums[1:]),rob1(nums[:-1]))
                                
Qus 18:
Sol:
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def rob(self, root):
        """
        :type root: TreeNode
        :rtype: int
        """
        #https://www.youtube.com/watch?v=bEZxjZCY618
        #with memorization(dont repeat same mistake again) make your life easy
        dp={}
        def max_loot(root):
            
            if(root==None):
                dp[root]=0
                return dp[root]
            if(not dp.get(root.left,None)):
                
                dp[root.left]=max_loot(root.left)
            a=dp[root.left]
            if(not dp.get(root.right,None)):
                
                dp[root.right]=max_loot(root.right)
            b=dp[root.right]
            c,d,e,f=0,0,0,0
            if(root.left):
                if(not dp.get(root.left.left,None)):
                    dp[root.left.left]=max_loot(root.left.left)
                c=dp[root.left.left]
                
                if(not dp.get(root.left.right,None)):
                    dp[root.left.right]=max_loot(root.left.right)
                d=dp[root.left.right]
                
            if(root.right):
                if(not dp.get(root.right.left,None)):
                    dp[root.right.left]=max_loot(root.right.left)
                e=dp[root.right.left]
                
                if(not dp.get(root.right.right,None)):
                    dp[root.right.right]=max_loot(root.right.right)
            
                e=dp[root.right.left]
                f=dp[root.right.right]
                
            dp[root]=max(a+b,c+d+e+f+root.val)
            return dp[root]
                
        
        return max_loot(root)
		
Qus 19:https://leetcode.com/problems/distribute-coins-in-binary-tree/submissions/
Sol:
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
from collections import defaultdict
class Solution(object):
    
    def distributeCoins(self, root):
        global move
        move=0
        def moves(node):
            #do post order triversal 
            #moves is always positive whether coins are moving from par to chield or                   
			#chield to par
            #so we are maintaining a global moves whic stores sum of all absolte val                   
			# of left moves and right moves
            # function is returning number of conins required to balance him + all                     
			# children
            global move
            if(node==None):
                return 0
            left_moves=0
            right_moves=0
            if(node.left):
                left_moves=moves(node.left)
            if(node.right):
                right_moves=moves(node.right)
            move+=abs(left_moves)+abs(right_moves)
            
            return left_moves+right_moves+node.val-1
            
            
        moves(root)
        return move
   
