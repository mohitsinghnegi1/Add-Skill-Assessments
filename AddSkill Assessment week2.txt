Qus 1: 
SOl:https://leetcode.com/problems/sort-colors/submissions/
class Solution(object):
    def sortColors(self, nums):
        """
        :type nums: List[int]
        :rtype: None Do not return anything, modify nums in-place instead.
        
        """
         # Dutch National Flag Algorithm, or 3-way Partitioning â€”
        low=0
        mid=0
        high=len(nums)-1
        while(mid<=high):
            if(nums[mid]==0):
                nums[low],nums[mid]=nums[mid],nums[low]
                low+=1
                mid+=1
                #alway low will be 0 or 1 as mid already triverse and puted all 2 at the end
            elif(nums[mid]==1):
                mid+=1 #since 1 should be in middle so skip 
            else:
                nums[mid],nums[high]=nums[high],nums[mid]
                high-=1

#         Sol2
        # count0=0
        # count1=0
        # count2=0
        # for i in range(len(nums)):
        #     if(nums[i]==0):
        #         count0+=1
        #     if(nums[i]==1):
        #         count1+=1
        #     if(nums[i]==2):
        #         count2+=1
        # i=0
        # # print count2
        # while(count0>0 or count1>0 or count2>0  ):
        #     # print count0,count1,count2
        #     if(count0>0):
        #         nums[i]=0
        #         count0-=1
        #     elif(count1>0):
        #         nums[i]=1
        #         count1-=1
        #     else:
        #         nums[i]=2
        #         count2-=1
        #     i+=1
        
        # print nums        


Qus 2:https://leetcode.com/problems/maximum-gap/
SOl: 
class Solution(object):
    def maximumGap(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        if(len(nums)<2):
            return 0
        def bucketSort(nums,i):
            l=[]
            r=[]
            j=0
            
            while(j<len(nums)):
                #print "uiu ",nums[j][i]
                if(nums[j][i]=='0'):
                    l.append(nums[j])
                else:
                    r.append(nums[j])
                j+=1
            #print l,r
                 
            return l+r
            
            
        def stableSort(nums):
            
            nums=map(lambda x:bin(x)[2:].rjust(32,'0'),nums)
            for i in range(31,0,-1):
                nums=bucketSort(nums,i)
                #print nums
            nums=map(lambda x:int(x,2),nums)
            #print nums
            return nums
        
        # nums=sorted(nums)
        #sort in accending order
        nums=stableSort(nums)
        max1=0
        for i in range(1,len(nums)):
            max1=max(max1,nums[i]-nums[i-1])
        return max1
Qus 3:https://leetcode.com/problems/filter-restaurants-by-vegan-friendly-price-and-distance/
Sol :
class Solution(object):
    def filterRestaurants(self, restaurants, vf, maxPrice, maxDistance):
        """
        :type restaurants: List[List[int]]
        :type veganFriendly: int
        :type maxPrice: int
        :type maxDistance: int
        :rtype: List[int]
        """
        filtered_res=[]
        for restaurant in restaurants:
            if(vf==1 and restaurant[2]!=1 or restaurant[3]>maxPrice or restaurant[4]>maxDistance):
                continue
            filtered_res.append(restaurant)
        filtered_res.sort(reverse=True,key=lambda x:(x[1],x[0]))
        
        
        res=[]
        #use bubble sort and use stable bubble or merge sort on the bases of rating
        for i in filtered_res:
            res.append(i[0])
        return res
	
Qus4:https://leetcode.com/problems/min-stack/submissions/
Sol:
class MinStack(object):

    def __init__(self):
        """
        initialize your data structure here.
        """
        self.min=None
        self.stack=[]
        self.minstack=[]

    def push(self, x):
        """
        :type x: int
        :rtype: None
        """
        if(self.minstack==[]):
            self.minstack.append(x)
        else:
            self.minstack.append(min(self.minstack[-1],x))
        self.stack.append(x)

    def pop(self):
        """
        :rtype: None
        """
        self.minstack.pop()
        return self.stack.pop()

    def top(self):
        """
        :rtype: int
        """
        return self.stack[-1]

    def getMin(self):
        """
        :rtype: int
        """
        return self.minstack[-1]


# Your MinStack object will be instantiated and called as such:
# obj = MinStack()
# obj.push(x)
# obj.pop()
# param_3 = obj.top()
# param_4 = obj.getMin()



Qus 5:Create a chain hashing using hashfunction n%6 and do insertion and search elemnt 
sol:
# Definition for singly-linked list.
class ListNode(object):
    def __init__(self, x):
        self.val = x
        self.next = None
    
def hashfunction(n):
    return n%6
def search(searchKey,ptr):
    key=hashfunction(searchkey)
    
    while(ptr!=None):
        if(ptr.val==searchkey):
            return "found"
        ptr=ptr.next

    return "not found"

    
    
    
a=map(int,raw_input().split())
ht=[None]*6
head=[None]*6
tail=[None]*6
for i in a:
    key=hashfunction(i)
    if(head[key]!=None):
        node=ListNode(i)
        tail[key].next=node
        tail[key]=tail[key].next
    else:
        head[key]=ListNode(i)
        tail[key]=head[key]
        
        ht[key]=head[key]
    
for i in ht:
    ptr=i
    while(ptr!=None):
        print ptr.val,
        ptr=ptr.next
    if(i!=None):
        print 
#search key
searchkey=int(input())
ptr=ht[key]
ans=search(searchkey,ptr)
print ans

Qus 6 :https://leetcode.com/problems/group-anagrams/submissions/
SOl :
from collections import defaultdict
class Solution(object):
    def groupAnagrams(self, s):
        """
        :type strs: List[str]
        :rtype: List[List[str]]
        """
        # d={}
        # for i in s:
        #     k="".join(sorted(i))
        #     if(d.get(k,None)):
        #         d[k].append(i)
        #     else:
        #         d[k]=[i]
        # #print d
        # res=[]
        # for i in d:
        #     res.append(d[i])
        # return res
        d=defaultdict(list)
        
        for st in s:
            a=[0]*26
            for c in st:
                a[ord(c)-ord('a')]+=1
            
                
            d[tuple(a)].append(st)
        return d.values()
                
                
            
            
Qus 7:https://leetcode.com/problems/single-number/submissions/
Sol :
class Solution(object):
    def singleNumber(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        if(nums==[]):
            return 0
        xor=nums[0]
        if(len(nums)==1):
            return xor
        xor=xor^nums[1]
        for i in range(2,len(nums)):
            xor^=nums[i]
        return xor
        
        
Qus 8:https://leetcode.com/problems/longest-substring-without-repeating-characters/submissions/
Sol :


#please do it using sliding window and dict of character as key and value as index of character
# so whenever the current character is present in the array then we get the currrent character from dict and use len from i+1 to j and update max 
class Solution(object):
    def lengthOfLongestSubstring(self, s):
        """
        :type s: str
        :rtype: int
        """
        if(len(s)==0):
            return 0
        max1=1
   
        o=[]
        for j,i in enumerate(s):
            if(i not in o):
                o.append(i)
            else:
                max1=max(max1,len(o))
                index=o.index(i)
                o=o[index+1:]
                o.append(i)
        max1=max(max1,len(o))
        return max1
                
            
 Qus 9 : https://leetcode.com/problems/lru-cache/
 SOl :
 #try to do it using doubly linked list
 from collections import OrderedDict
class LRUCache(object):

    def __init__(self, capacity):
        """
        :type capacity: int
        """
        self.d=OrderedDict({})
        self.capacity=capacity
        self.count=0
        

    def get(self, key):
        """
        :type key: int
        :rtype: int
        """
        # print self.d
        if(self.d.get(key,None)==None):
            return -1
        value=self.d[key]
        del self.d[key]
        self.d[key]=value
        return self.d.get(key)
        
        

    def put(self, key, value):
        """
        :type key: int
        :type value: int
        :rtype: None
        """
        #incase if element is already present we need to handle that case too
        if(self.count>=self.capacity and key not in self.d):
            for i in self.d:
                del self.d[i]
                self.count-=1
                break
        #this piece of code will handle case when there is already key present 
        if(key in self.d):
            del self.d[key]
            self.count-=1
            
        self.d[key]=value
        
        
        self.count=self.count+1
        # print self.count


# Your LRUCache object will be instantiated and called as such:
# obj = LRUCache(capacity)
# param_1 = obj.get(key)
# obj.put(key,value)

Qus 10:https://leetcode.com/problems/largest-perimeter-triangle/submissions/
sOL:
class Solution(object):
    def largestPerimeter(self, A):
        """
        :type A: List[int]
        :rtype: int
        """
        if(len(A)<3):
            return 0
        A.sort()
        for i in range(len(A)-3,-1,-1):
            
            if(A[i]+A[i+1]>A[i+2]):
                return A[i]+A[i+1]+A[i+2]
        return 0
		
qUS 11:https://leetcode.com/problems/largest-rectangle-in-histogram/
Sol : Brute force O(n2)
class Solution:
    def largestRectangleArea(self, height):
        
        area=0
        #calculate area by moving to left and right 
        
        for i in range(len(height)):
            l=i
            ca=0
            
            while(l>=0):
                if(height[l]>=height[i]):
                    ca=ca+height[i]
                    area=max(area,ca)
                else:
                    break
                l-=1
                
            r=i+1
            while(r<len(height)):
                if(height[r]>=height[i]):
                    ca=ca+height[i]
                    area=max(area,ca)
                else:
                    break
                r+=1
        return area
        
		
better solution-----
def largestRectangleArea(self, height):
        max1=0
        stack=[]
        i=0
        while(i<len(height)):
            if(stack==[] or height[stack[-1]]<=height[i]):
                if(stack!=[]):
                    #print height[stack[-1]],height[i]
                stack.append(i)
                print stack
                i+=1
            else:
                #current val is i height[i] is smaller then the last visited elemnt            
                print "2 ",stack
                pop1=stack.pop()
                
                if(stack==[]):
                    max1=max(max1,height[pop1]*(i))
                else:
                    max1=max(max1,height[pop1]*(i-1-stack[-1]))
                
        while(stack!=[]):
            pop1=stack.pop()
            if(stack==[]):
                max1=max(max1,height[pop1]*(i))
            else:
                max1=max(max1,height[pop1]*(i-1-stack[-1]))
        
        
        
        
        return max1
		
		
Qus 12 :https://leetcode.com/problems/insertion-sort-list/submissions/
Sol :
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def insertionSortList(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """
        #how it could be done using single pointer
        if(head==None):
            return
        cur=head.next
        iptr=head
        
        while(cur!=None):
            
            while(iptr!=cur):
                if(iptr.val>cur.val):
                    iptr.val,cur.val=cur.val,iptr.val
                iptr=iptr.next
                
            
            iptr=head
            cur=cur.next
            
            
        return head
        
----------------------------------------------------

Qus 13:https://leetcode.com/problems/sort-the-matrix-diagonally/submissions/
Sol :
class Solution(object):
    from collections import defaultdict
    def diagonalSort(self, mat):
        """
        :type mat: List[List[int]]
        :rtype: List[List[int]]
        """
        
        d=collections.defaultdict(list)
        for i in range(len(mat)):
            for j in range(len(mat[0])):
                d[i-j].append(mat[i][j])
        #print d
        
        for i in d:
            d[i].sort(reverse=True)
        for i in range(len(mat)):
            for j in range(len(mat[0])):
                mat[i][j]=d[i-j].pop()
        return mat
#second solution-----
#         if(len(mat)==0):
#             return []
#         for p in range(max(len(mat),len(mat[0]))):
            
#             for i in range(len(mat)-1,0,-1):
#                 for j in range(len(mat[0])-1,0,-1):
#                     if(mat[i][j]<mat[i-1][j-1]):
#                         mat[i][j],mat[i-1][j-1]=mat[i-1][j-1],mat[i][j]
#         return mat


QUs 14:https://leetcode.com/problems/matrix-cells-in-distance-order/
Sol:
class Solution(object):
    def allCellsDistOrder(self, R, C, r0, c0):
        #sol 1 using bubble sort complexity O(n**2)
        m=[abs(r0-i)+abs(c0-j) for i in range(R) for j in range(C)]
        n=[[i,j] for i in range(R) for j in range(C)]
        for i in range(len(n)):
            for j in range(1,len(n)):
                if(m[j-1]>m[j]):
                    m[j-1],m[j]=m[j],m[j-1]
                    n[j-1],n[j]=n[j],n[j-1]
        
        return n
    
        #calculate mahanta distance array
        #time complexity sol 2 O(nlogn)
        # m=[abs(r0-i)+abs(c0-j) for i in range(R) for j in range(C)]
        # n=[[i,j] for i in range(R) for j in range(C)]
        # n.sort(key=lambda x:m[C*x[0]+x[1]])
        # return n
        
Qus 15:https://leetcode.com/problems/car-fleet/submissions/
Sol:
class Solution(object):
    def carFleet(self, target, pos, s):
        """
        :type target: int
        :type position: List[int]
        :type speed: List[int]
        :rtype: int
        """
        #pos is the main factor so if speed of behind cars is more then it will come in same fleet othervise it will come in different fleet
        if(pos==[]):
            return 0
        a=[]
        for i in range(len(pos)):
            a.append((pos[i],s[i]))
        a.sort(key=lambda x: x[0],reverse=True)
        fleet=1
        #TIME = distance/speed
        time=((target-a[0][0])+0.0)/(a[0][1]+0.0)
        for i in range(1,len(pos)):
            curtime=((target-a[i][0])+0.0)/(a[i][1]+0.0)
            #print curtime,time
            if(curtime>time):
                fleet+=1
                time=curtime
        return fleet
            
----
Qus 16:https://leetcode.com/problems/sort-list/
Sol: not in place
 # Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def sortList(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """
        #using O(n) space
        ptr=head
        a=[]
        while(ptr!=None):
            a.append(ptr.val)
            ptr=ptr.next
        head1=ListNode(0)
        ptr=head1
        a.sort(reverse=True)
        while(a!=[]):
            el=a.pop()
            ptr.next=ListNode(el)
            ptr=ptr.next
        return head1.next
            
        
 Qus 17:https://leetcode.com/problems/exclusive-time-of-functions/
Sol:
from collections import defaultdict
class Solution(object):
    def exclusiveTime(self, n, logs):
        """
        :type n: int
        :type logs: List[str]
        :rtype: List[int]
        """
        if(logs==[]):
            return []
        #try to visualize it first small line which is equal to diff which will be substracted #from it parent
        logs=[ [int(i.split(":")[0]),i.split(":")[1],int(i.split(":")[2])] for i in logs]
        stack=[]
        ans=[0]*n
        
        for log in logs:
            id1,state,time=log
            #print id1,state,time
            if(state=="start"):
                stack.append([id1,time])
            else:
                pid,ptime=stack.pop()
                delta=time-ptime+1
                ans[pid]+=delta
                #print stack
                if(stack!=[]):
                    ans[stack[-1][0]]-=delta
        return ans
            
        
            
 Qus 18:https://leetcode.com/problems/middle-of-the-linked-list/submissions/
 Sol:
 # Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def middleNode(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """
        
        slow=head
        fast=head
        while(fast!=None and fast.next!=None):
            slow=slow.next
            fast=fast.next.next
            
        return slow

Qus 19:https://leetcode.com/problems/generate-parentheses/submissions/
SOl:
class Solution(object):
    def generateParenthesis(self, n):
        """
        :type n: int
        :rtype: List[str]
        """
        
        stack=[]
        stack.append(('(',1))
        stack.append((')',1))
        out=[]
        while(stack):
            node,i=stack.pop()
            if(i<2*n):
                stack.append((node+')',i+1))
                stack.append((node+'(',i+1))
                
            else:
                out.append(node)
                
                
        def isValid(p,n):
            if(p[0]==')'):
                return False
            stack=[]
            stack.append(p[0])
            i=1
            while(i<n):
                if(stack==[] and p[i]==')'):
                    return False
                if(p[i]=='('):
                    stack.append(p[i])
                else:
                    stack.pop()
                i+=1
            if(stack!=[]):
                return False
            return True
 
        ans=[]
        for i in out:
            k=isValid(i,n*2)
            if(k):
                ans.append(i)
                
            
        return ans
		
---efficient one ----
            
 Qus :https://leetcode.com/problems/sort-array-by-parity-ii/submissions/
 Sol:
 class Solution(object):
    def sortArrayByParityII(self, A):
        """
        :type A: List[int]
        :rtype: List[int]
        """
        odd=[]
        even=[]
        for i in A:
            if(i%2==0):
                even.append(i)
            else:
                odd.append(i)
                
                
        for i in range(len(A)):
            if(i%2==0):
                A[i]=even.pop()
            else:
                A[i]=odd.pop()
        return A
                
        
        j=1
        
        for i in range(0,len(A),2):
            #if for any even position there is some odd element
            if(A[i]%2):
                while(j%2):
                    j+=2
                A[i],A[j]=A[j],A[i]
        return A
                
        
            
        
        
        
        