Qus 1 : https://leetcode.com/problems/word-pattern/

Solution :
from collections import OrderedDict
class Solution(object):
    def wordPattern(self, pattern, str):
        """
        :type pattern: str
        :type str: str
        :rtype: bool
        """
        #we need to remember two things first is same charter same word 
        #no two diferent character should have same value
        d=OrderedDict({})
        a=str.split(" ")
        v=set()
        if len(pattern)==len(a):
            for j,i in enumerate(pattern):
                # print j,i
                if i in d and d[i]!=a[j]:
                    return False
                if i not in d:
                    d[i]=a[j]
                    if(a[j] not in v):
                        v.add(a[j])
                    else:
                        return False
            
            return True
        else:
            return False
		
		
Qus 2: https://leetcode.com/problems/contains-duplicate-ii/submissions/
Sol :
class Solution(object):
    def containsNearbyDuplicate(self, nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: bool
        """
        d={}
        for i,val in enumerate(nums):
            if val in d:
                if(i-d[val]<=k):
                    return True
                else:
                    d[val]=i
            else:
                d[val]=i
            

        return False


Qus 3:https://leetcode.com/problems/majority-element/submissions/
class Solution(object):
    def majorityElement(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        d={}
        
        for i in nums:
            d[i]=d.get(i,0)+1
        for i in d:
            if(d[i]>len(nums)/2):
                return i
            

Qus 4:https://leetcode.com/problems/valid-palindrome/
Sol :
class Solution(object):
    def isPalindrome(self, s):
        """
        :type s: str
        :rtype: bool
        """
        s=s.lower()
        stack=[]
        for i in s:
            if(i.isalnum()):
                stack.append(i)
        if(stack==stack[::-1]):
            return True
        else:
            return False
        
        
            
Qus 5: https://leetcode.com/problems/best-time-to-buy-and-sell-stock/submissions/
SOl :
import sys
class Solution(object):
    def maxProfit(self, prices):
        """
        :type prices: List[int]
        :rtype: int
        """
        profit=0
        min1=sys.maxsize
        for i in prices:
            if(i<min1):
                min1=i
            profit=max(profit,i-min1)
        return profit
		
Qus 6 :https://leetcode.com/problems/longest-palindromic-substring/solution/
sol:expend around the center


class Solution(object):
    def longestPalindrome(self, s):
        """
        :type s: str
        :rtype: str
        """
        def maxlenr(i,s):
            if(i+1>=len(s)):
                return s[i]
            if(s[i+1]!=s[i]):
                return s[i]
            o=s[i]+s[i+1] 
            j=1
            while(i-j>=0 and i+j+1<len(s) and s[i-j]==s[i+j+1]):
                o=s[i-j]+o+s[i+j+1]
                j+=1
            return o
                
        def maxlen(i,s):
            
            
            o=s[i]
            j=1
            while(i-j>=0 and i+j<len(s) and s[i-j]==s[i+j]):
                o=s[i-j]+o+s[i+j]
                j+=1
            return o
        
        
        
        
        
        maxstri=''
        
        for i in range(len(s)):
            
            mm=maxlen(i,s)
            rm=maxlenr(i,s)
            # print mm,rm
            
            if(len(mm)>len(maxstri)):
                maxstri=mm
            if(len(rm)>len(maxstri)):
                maxstri=rm
        return maxstri

Qus 7:https://leetcode.com/problems/two-sum/submissions/
Sol:
class Solution(object):
    def twoSum(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        """
        d={}
        for i in range(len(nums)):
            if(target-nums[i] in d):
                return [d[target-nums[i]],i]
            else:
                d[nums[i]]=i
        
		
Qus 8:https://leetcode.com/problems/add-two-numbers/submissions/
Sol :
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def addTwoNumbers(self, l1, l2):
        """
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        """
        if(l1==None or l2==None):
            return l1
        
        ptr=ListNode(0)
        head=ptr
        ptr2=l1
        ptr3=l2
        c=0
        while(True):
            if(ptr2==None and ptr3==None):
                break
            #in case both are None
            if(ptr2==None):
                ptr2=ListNode(0)
            if(ptr3==None):
                ptr3=ListNode(0)
            
            x=(ptr3.val+ptr2.val+c)%10
            c=(ptr3.val+ptr2.val+c)/10
            
            ptr.next=ListNode(x)
            ptr=ptr.next
            ptr2=ptr2.next
            ptr3=ptr3.next
        if(c!=0):
            ptr.next=ListNode(c)
        return head.next
            
Qus 9:https://leetcode.com/problems/longest-substring-without-repeating-characters/submissions/
Sol 
class Solution(object):
    def lengthOfLongestSubstring(self, s):
        """
        :type s: str
        :rtype: int
        """
        max1=0
   
        o=[]
        for j,i in enumerate(s):
            if(i not in o):
                o.append(i)
                #print o
                max1=max(max1,len(o))
            else:
                
                o=o[o.index(i)+1:]
                o.append(i)
                #whenever append calculate max
                max1=max(max1,len(o))
                #print o
                
        max1=max(max1,len(o))
        return max1
                
            
 Qus 10 :https://leetcode.com/problems/palindrome-number/submissions/
 Sol :
 class Solution(object):
    def isPalindrome(self, x):
        """
        :type x: int
        :rtype: bool
        """
        if(x<0):
            return False
        z=x
        rev=0
        while(x!=0):
            rev=rev*10+x%10
            x=x/10
        
        if(rev==z ):
            return True
        else:
            return False
        
 Qus 11 :https://leetcode.com/problems/container-with-most-water/submissions/
Sol :
class Solution(object):
    def maxArea(self, A):
        max1=0
        
        l=0
        r=len(A)-1
        while(l<r):
            max1=max(max1,min(A[l],A[r])*(r-l))
            if(A[l]<A[r]):
                l+=1
            elif(A[r]<A[l]):
                r-=1
            else:
                l+=1
                r-=1
        return max1
 
 Qus 12: https://leetcode.com/problems/longest-common-prefix/submissions/
 Sol :
 class Solution(object):
    def longestCommonPrefix(self, strs):
        """
        :type strs: List[str]
        :rtype: str
        """
        if(strs==[]):
            return ''
        o=''
        for i in range(min(map(len,strs))):
            k=strs[0][i]
            for s in strs:
                if(s[i]!=k):
                    return o
            o=o+k
        return o
                
            
 Qus 13: https://leetcode.com/problems/merge-two-sorted-lists/submissions/
 Sol :
 # Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def mergeTwoLists(self, l1, l2):
        """
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        """
        ptr1=l1
        ptr2=l2
        ptr3=ListNode(0)
        head=ptr3
        #ptr3.next is null so dont assign head =ptr3.next
        while(ptr2!=None and ptr1!=None):
            #print head
            if(ptr1.val<ptr2.val):
                ptr3.next=ListNode(ptr1.val)
                ptr3=ptr3.next
                ptr1=ptr1.next
                
            else:
                ptr3.next=ListNode(ptr2.val)
                ptr3=ptr3.next
                ptr2=ptr2.next
        #print head
        if(ptr2!=None):
            ptr3.next=ptr2
        if(ptr1!=None):
            ptr3.next=ptr1
        return head.next
Qus:14
https://leetcode.com/problems/remove-duplicates-from-sorted-array/submissions
Sol :
class Solution(object):
    def removeDuplicates(self, A):
        if(A==[]):
            0
        i=0
        while(i+1<len(A)):
            if(A[i]==A[i+1]):
                del A[i+1]
            else:
                i+=1
        return len(A)
        
            
        
        
        
        
#         i=0
#         j=1
#         while(j<len(A)):
#             if(A[i]!=A[j]):
#                 i+=1
#                 A[i]=A[j]
#                 j+=1
                
#             else:
#                 j+=1
#         return i+1
        
Qus 15 : https://leetcode.com/problems/move-zeroes/submissions/
Sol : 
class Solution(object):
    def moveZeroes(self, nums):
        """
        :type nums: List[int]
        :rtype: None Do not return anything, modify nums in-place instead.
        """
        i=0
        j=0
        while(j<len(nums)):
            if(nums[j]!=0):
                nums[i]=nums[j]
                if(i!=j):
                    nums[j]=0
                i+=1
                
                
            
            j+=1
Qus 16:https://leetcode.com/problems/trapping-rain-water/
Sol:
class Solution(object):
    def trap(self, height):
        """
        :type height: List[int]
        :rtype: int
        """
    
        n=len(height)
        if(n==0 or n==1):
            return 0
        lmax=[height[0]]
        for i in range(1,n):
            lmax.append(max(height[i],lmax[-1]))
        rmax=[0]*len(height)
        rmax[-1]=height[-1]
        for i in range(n-2,-1,-1):
            rmax[i]=max(rmax[i+1],height[i])
        #print lmax,rmax
        
        total=0
        for i in range(1,n-1):
            
            total+=min(lmax[i],rmax[i])-height[i] 
        return total
            
            
        
        
        
        
        
        
        
        
        
        
#         n=len(height)
#         if(n==0 or n==1 ):
#             return 0
#         left_mh=[height[0]]
#         #make a array in which each elemnt will tell what is the lagest hargiht till now
#         for i in range(1,n):
#             left_mh.append(max(left_mh[i-1],height[i]))
        
#         right_mh=[0]*n
#         right_mh[-1]=height[-1]
#         # print right_mh,n
#         for i in range(n-2,-1,-1):
#             # print i,right_mh
#             right_mh[i]=max(right_mh[i+1],height[i])
#         total=0
#         for i in range(1,n-1):
#             left_max=left_mh[i]
#             right_max=right_mh[i]
#             min_height=min(left_max,right_max)
#             total+=min_height-height[i]
            
#         return total
            
          
  Qus17: https://leetcode.com/problems/filter-restaurants-by-vegan-friendly-price-and-distance/submissions/
SOl :
class Solution(object):
    def filterRestaurants(self, restaurants, vf, maxPrice, maxDistance):
        """
        :type restaurants: List[List[int]]
        :type veganFriendly: int
        :type maxPrice: int
        :type maxDistance: int
        :rtype: List[int]
        """
        filtered_res=[]
        for restaurant in restaurants:
            if(vf==1 and restaurant[2]!=1 or restaurant[3]>maxPrice or restaurant[4]>maxDistance):
                continue
            filtered_res.append(restaurant)
        filtered_res.sort(reverse=True,key=lambda x:(x[1],x[0]))
        
        
        res=[]
        for i in filtered_res:
            res.append(i[0])
        return res


Qus 18: https://leetcode.com/problems/linked-list-components/submissions/
Sol :
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def numComponents(self, head, G):
        """
        :type head: ListNode
        :type G: List[int]
        :rtype: int
        """
        G=set(G)
        #single all elemnt is unique we can directly use in oprator
        ptr=head
        c=0
        count=0
        while(ptr!=None):
            if(ptr.val in G and c==0):
                c=1
                count+=1
            if(ptr.val not in G):
                c=0
            ptr=ptr.next
        return count		
		
Qus 19: https://leetcode.com/problems/filter-restaurants-by-vegan-friendly-price-and-distance/submissions/
SOl:
class Solution(object):
    def filterRestaurants(self, restaurants, vf, maxPrice, maxDistance):
        """
        :type restaurants: List[List[int]]
        :type veganFriendly: int
        :type maxPrice: int
        :type maxDistance: int
        :rtype: List[int]
        """
        filtered_res=[]
        for restaurant in restaurants:
            if(vf==1 and restaurant[2]!=1 or restaurant[3]>maxPrice or restaurant[4]>maxDistance):
                continue
            filtered_res.append(restaurant)
        filtered_res.sort(reverse=True,key=lambda x:(x[1],x[0]))
        
        
        res=[]
        #use bubble sort and use stable bubble or merge sort on the bases of rating
        for i in filtered_res:
            res.append(i[0])
        return res
Qus 20: https://leetcode.com/problems/trapping-rain-water/
Sol:
class Solution(object):
    def trap(self, height):
        """
        :type height: List[int]
        :rtype: int
        """
    
        n=len(height)
        if(n==0 or n==1):
            return 0
        lmax=[height[0]]
        for i in range(1,n):
            lmax.append(max(height[i],lmax[-1]))
        rmax=[0]*len(height)
        rmax[-1]=height[-1]
        for i in range(n-2,-1,-1):
            rmax[i]=max(rmax[i+1],height[i])
        #print lmax,rmax
        
        total=0
        for i in range(1,n-1):
            
            total+=min(lmax[i],rmax[i])-height[i] 
        return total

Qus 21: https://leetcode.com/problems/linked-list-cycle-ii/submissions/
Sol:
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def detectCycle(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """
        d={}
        ptr=head
        
        while ptr:
            if id(ptr) in d:
                return d[id(ptr)]
            else:
                d[id(ptr)]=ptr
            ptr=ptr.next
        return None
    
Qus 22: https://leetcode.com/problems/linked-list-cycle-ii/submissions/
Sol :
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def detectCycle(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """
        if(head==None):
            return None
        out=None
        ptr=head
        ptr1=head.next
        
        while(ptr!=None and ptr1!=None):
            #print ptr.val,ptr1.val
            
            if(ptr==ptr1):
                print ptr1.val,ptr.val
                out=ptr
                
                break
            ptr=ptr.next
            if(ptr1.next==None):
                break
            ptr1=ptr1.next.next
        
        if(out==None):
            return None
        
        ptr1=head
        
        while(ptr1!=ptr):
            #print ptr.val,ptr1.val
            ptr=ptr.next
            #this condition should be in middle
            if(ptr==ptr1):
                break
            ptr1=ptr1.next
        #this will be the case [1] 0 when there is only one elemnt
        return ptr
        

Qus 23 :https://leetcode.com/problems/insert-interval/submissions/
Sol :
class Solution(object):
    def insert(self, intervals, newInterval):
        """
        :type intervals: List[List[int]]
        :type newInterval: List[int]
        :rtype: List[List[int]]
        """
        #my algo basically have three parts first part is before overlapping sequaence
        #second part is overlapping sequence
        #third part is after overlapping sequence
        
        flag=False
        x1,y1=newInterval
        o=[]
        for interval in intervals:
            x2,y2=interval
            #insert all elemnts before overlapping list 
            if(y2<x1):
                o.append([x2,y2])
                continue
                
            
            if(x2>y1 ):#this condition is for after overlapping sequaence
                
                if(flag==False):
                    #insert overlapping and one current intervals elemnt 
                    o.append([x1,y1])
                    o.append([x2,y2])
                    flag=True
                else:
                    #insert all elelmnts after overlapping list
                    o.append([x2,y2])
            else:
                #taking union until we combine all overlapping elemnt
                x1,y1=min(x1,x2),max(y1,y2)
        if(flag==False):
            o.append([x1,y1])
        return o        
        
                      
        