Qus 1 :https://leetcode.com/problems/search-a-2d-matrix/

SOl:
class Solution(object):
    def searchMatrix(self, matrix, target):
        """
        :type matrix: List[List[int]]
        :type target: int
        :rtype: bool
        """
        #time complexity log n*m
        if(len(matrix)==0):
            return 0
        no_of_rows=len(matrix)
        
        
        no_of_cols=len(matrix[0])
        #t is total cells in the matrix
        total_elemnt=no_of_cols*no_of_rows
        
        l=0
        r=total_elemnt-1
        while(l<=r):
            
            #calculate a mid index
            mid=l+(r-l)/2
            
            #find the row of mid elemnt in a matrix
            rows=mid/no_of_cols
            #find the col of mid elemnt in a matrix
            col=mid%no_of_cols
            #now access the mid elemnt value
            mid_el=matrix[rows][col]
            
            if(mid_el==target):
                #if the elemnt val equals target then return true
                return True
            elif(mid_el<target):
                #if mid elemnt val less then target increament l
                l=mid+1
            else:
                r=mid-1
                #if mid elemnt val greater then target decrement r
        #if element not in matrix return False
        return False
            
Qus 2: https://leetcode.com/problems/spiral-matrix/
SOl:
class Solution(object):
    def spiralOrder(self, A):
        """
        :type matrix: List[List[int]]
        :rtype: List[int]
        """
        if(A==[]):
            return []
        n=len(A)
        m=len(A[0])
        
        l=0
        r=m
        t=0
        b=n
        ans=[]
        while(l<r and t<b):
            for i in range(l,r):
                ans.append(A[t][i])
            t+=1
            for i in range(t,b):
                ans.append(A[i][r-1])
            r-=1
            if(t<b):
                for i in range(r-1,l-1,-1):
                    ans.append(A[b-1][i])
                b-=1
            if(l<r):
                for i in range(b-1,t-1,-1):
                    ans.append(A[i][l])
                l+=1
        return ans

        
#         l=0
#         r=m
#         t=0
#         b=n
       
        
#         ans=[]
#         while(l<r and t<b):
            
            
#             for i in range(l,r):
#                 ans.append(A[t][i])
#             t+=1
            
#             for i in range(t,b):
#                 ans.append(A[i][r-1])
#             r-=1
#             if(t<b):
#                 for i in range(r-1,l-1,-1):
#                     ans.append(A[b-1][i])
#                 b-=1
#             if(l<r):
#                 for i in range(b-1,t-1,-1):
#                     ans.append(A[i][l])
#                 l+=1
        
#         return ans
            
                
Qus3: https://leetcode.com/problems/find-the-difference/submissions/
Sol :
class Solution(object):
    def findTheDifference(self, s, t):

        #sol1
        # d={}
        # for i in s:
        #     d[i]=d.get(i,0)+1
        # d1={}
        # for j in t:
        #     d1[j]=d1.get(j,0)+1
        # for i in d1:
        #     if(i not in d or d[i]<d1[i]):
        #         return i
		
		#sol2
        if(len(s)==0):
            return t
        xor=ord(t[0])^ord(t[1])
        for i in s+t[2:]:
            xor=xor^ord(i)
        return chr(xor)
   
Qus 4: https://leetcode.com/problems/find-all-anagrams-in-a-string/submissions/
Sol:
class Solution(object):
    def findAnagrams(self, s, p):
        """
        :type s: str
        :type p: str
        :rtype: List[int]
        """
        ls=len(s)
        lp=len(p)
        if(ls<lp or ls==0):
            return []
        sa=[0]*26
        pa=[0]*26
        idx_a=[]
        
        for i in p:
            pa[ord(i)-ord('a')]+=1
        
        for i in range(ls):
            if(i>=lp-1):
                
                sa[ord(s[i])-ord('a')]+=1
                #print sa,pa
                if(sa==pa):
                    idx_a.append(i-lp+1)
                sa[ord(s[i-lp+1])-ord('a')]-=1
                
                
            else:
                sa[ord(s[i])-ord('a')]+=1
        
        return idx_a


Qus 5 :https://leetcode.com/problems/bulls-and-cows/submissions/
Sol:
class Solution(object):
    def getHint(self, secret, guess):
        """
        :type secret: str
        :type guess: str
        :rtype: str
        """
        bull=0
        cow=0
        s={}
        g={}
        for i in range(len(guess)):
            if(secret[i]==guess[i]):
                bull+=1
            else:
                g[guess[i]]=g.get(guess[i],0)+1
                s[secret[i]]=s.get(secret[i],0)+1
        
        for i in g:
            cow+=min(s.get(i,0),g.get(i))
        return str(bull)+"A"+str(cow)+"B"
        
 Qus 6:https://leetcode.com/problems/island-perimeter/submissions/
Sol:
class Solution(object):
    def islandPerimeter(self, grid):
        """
        :type grid: List[List[int]]
        :rtype: int
        """
        n=len(grid)-1
        m=len(grid[0])-1
        parameter=0
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if(grid[i][j]==1):
                    if(i-1<0 or grid[i-1][j]==0):
                        parameter+=1
                    if(i+1>n or grid[i+1][j]==0):
                        parameter+=1
                    if(j-1<0 or grid[i][j-1]==0):
                        parameter+=1
                    if(j+1>m or grid[i][j+1]==0):
                        parameter+=1
        return parameter
                    
Qus 7:https://leetcode.com/problems/distribute-candies/submissions/
Sol:
 class Solution(object):
    def distributeCandies(self, candies):
        """
        :type candies: List[int]
        :rtype: int
        """
        n=len(candies)
        set1=set(candies)
        return min(n/2,len(set1))
		
Qus 8:https://leetcode.com/problems/design-hashset/submissions/
Sol:
class MyHashSet(object):

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.set1=[False]*1000000

    def add(self, key):
        """
        :type key: int
        :rtype: None
        """
        self.set1[key]=True

    def remove(self, key):
        """
        :type key: int
        :rtype: None
        """
        self.set1[key]=False

    def contains(self, key):
        """
        Returns true if this set contains the specified element
        :type key: int
        :rtype: bool
        """
        return self.set1[key]


# Your MyHashSet object will be instantiated and called as such:
# obj = MyHashSet()
# obj.add(key)
# obj.remove(key)
# param_3 = obj.contains(key)


Qus 9: https://leetcode.com/problems/find-common-characters/submissions/

Sol:
class Solution(object):
    def commonChars(self, A):
        """
        :type A: List[str]
        :rtype: List[str]
        """
        if(not len(A)):
            return []
        
        a=[0]*26
        
        for c in A[0]:
            a[ord(c)-ord('a')]+=1
        for i in A:
            b=[0]*26
            for c in i:
                b[ord(c)-ord('a')]+=1
            #a and b is created now we need to take min
            for i in range(26):
                a[i]=min(a[i],b[i])
        ans=[]
        for i,v in enumerate(a):
            for j in range(v):
                ans.append(chr(i+ord('a')))
        return ans
            
            
            
 Qus 10:https://leetcode.com/problems/brick-wall/submissions/
 Sol:
 from collections import defaultdict
import sys
class Solution(object):
    def leastBricks(self, wall):
        """
        :type wall: List[List[int]]
        :rtype: int
        """
        #sol1 memory error
        if(len(wall)==0):
            return 0
        a=[0]*(sum(wall[0]))
        #a=[0]*(sum(wall[0])%1200000)
        for i in wall:
            s=0
            for j in i[:len(i)-1]:
                s+=j
                #a[s%1200000]-=1
                a[s]-=1
        #print a
        #print len(wall)+min(a[1:len(a)-1])
        return len(wall)+min(a) 
                
		#sol 2
		if(len(wall)==0):
				return 0
			d=defaultdict(int)
			#a=[0]*(sum(wall[0])%1200000)
			for i in wall:
				s=0
				for j in i[:len(i)-1]:
					s+=j
					#a[s%1200000]-=1
					d[s]-=1
			#print a
			#print len(wall)+min(a[1:len(a)-1])
			min1=0
			for i in d:
				min1=min(min1,d[i])
			return len(wall)+min1        
                    
        
                
Qus 11:https://leetcode.com/problems/daily-temperatures/submissions/
Sol:
import sys
class Solution(object):
    def dailyTemperatures(self, T):
        """
        :type T: List[int]
        :rtype: List[int]
        """
        a=[0]*101
        out=[0]*len(T)
        for i in range(len(T)-1,-1,-1):
            a[T[i]]=i
            min1=sys.maxsize
            #start from the current temperature 
            for j in range(T[i]+1,len(a)):
                if(a[j]>0):
                
                    if(a[j]-i)<min1:
                        min1=a[j]-i
                        #print min1,i,a[j]
            #print min1
            if(min1!=sys.maxsize):
                out[i]=min1
                    
        #print a  
        return out

        # bruteforce sol
#         ans=[]
#         for i in range(len(T)):
#             day=0
#             j=i+1
#             while(j<len(T) ):
#                 day+=1
#                 if(T[j]>T[i]):
#                     break
#                 j+=1    
                
#             else:
#                 day=0
#             ans.append(day)
#         return ans
          
           
Qus 12:https://leetcode.com/problems/alphabet-board-path/
Sol:
# just use a map or dictionary store all the positon like map[<char>]=(x,y) ie  map['a']=(0,0) ...map['z']=(0,5)  . then use this formula to calculate the steps (x2-x1)+(y2-y1) where (x1,y1) is current position and (x2,y2) is the position of next char . always follow the following conditions (these conditions will always lead to a valid move) .1. following two constraints is because if we take z position into consideration .if we want to move to upper right position then we can take path up then right.  and if we are on above right position (x=1,y=4) then we need to move left first then down to reach to z position
#2. always keep in mind that we need to move up first then left or right
#3. always keep in mind that we need to move left then move the bottom (edited) 

class Solution(object):
    def alphabetBoardPath(self, target):
        """
        :type target: str
        :rtype: str
        """
        #go up first then right
        d={}
        k=97
        for i in range(5):
            for j in range(5):
                d[chr(k)]=(j,i)
                k+=1
        d['z']=(0,5)
        x1,y1=(0,0)
        def p(x1,y1,x2,y2):
            global s
            if(y1<y2):
                #need to move downward
                if(x1<x2):
                    #need to move right
                    while(x1!=x2):
                        x1+=1
                        s+="R"
                    while(y1!=y2):
                        y1+=1
                        s+="D"
                        
                    s+="!"
                    
                else:
                    #need to move left or same
                    #first move left then downward
                    while(x1!=x2):
                        x1-=1
                        s+="L"
                    while(y1!=y2):
                        y1+=1
                        s+="D"
                        
                    s+="!"
            else:
                #need to move upward or same
                if(x1<x2):
                    #need to move right
                    while(y1!=y2):
                        y1-=1
                        s+="U"
                    while(x1!=x2):
                        x1+=1
                        s+="R"
                    s+="!"
                else:
                    #need to move left or same
                    while(y1!=y2):
                        y1-=1
                        s+="U"
                    while(x1!=x2):
                        x1-=1
                        s+="L"
 
                    s+="!"

        global s
        s=""  
        for i in target:
            #ex,ey=(2,1)
            x2,y2=d[i]
            p(x1,y1,x2,y2)
            x1,y1=x2,y2
        return s               

Qus 13:https://leetcode.com/problems/find-duplicate-file-in-system/solution/
SOl :
from collections import defaultdict
class Solution(object):
    def findDuplicate(self, paths):
        """
        :type paths: List[str]
        :rtype: List[List[str]]
        """
        d=defaultdict(list)
        for i in paths:
            arr=i.split()
            for i in arr[1:]:
                filename,content=i.split('(')
                
                d[content].append(arr[0]+'/'+filename)
        o=[]
        for key,val in d.items():
            if(len(d[key])>1):
                o.append(val)
        return o
            
            
Qus 14:https://leetcode.com/problems/subdomain-visit-count/
Sol:
from collections import defaultdict
class Solution(object):
    def subdomainVisits(self, cpdomains):
        """
        :type cpdomains: List[str]
        :rtype: List[str]
        """
        d=defaultdict(int)
        for i in cpdomains:
            vcount,domain=i.split()
            vcount=int(vcount)
            a=domain.split('.')
            if(len(a)==2):
                d[a[0]+"."+a[1]]+=vcount
                d[a[1]]+=vcount
            if(len(a)==3):
                d[a[0]+"."+a[1]+"."+a[2]]+=vcount
                d[a[1]+"."+a[2]]+=vcount
                d[a[2]]+=vcount
        o=[]
        for key,val in d.items():
            o.append(str(val)+" "+key)
        return o
            
 Qus 15:https://leetcode.com/problems/verifying-an-alien-dictionary/submissions/
 Sol:
 class Solution(object):
    def isAlienSorted(self, words, order):
        """
        :type words: List[str]
        :type order: str
        :rtype: bool
        """
        order={val:i for i,val in enumerate(order)}
        print order
        for i in range(len(words)-1):
            word1=words[i]
            word2=words[i+1]
            for i in range(min(len(word1),len(word2))):
                if(word1[i]!=word2[i]):
                    if(order[word1[i]]>order[word2[i]]):
                        #print "1",word1[i],word2[i]
                        return False
                    break
            else:
                if(len(word1)>len(word2)):
                    return False
            
            
        return True
		
Qus 16:https://leetcode.com/problems/exam-room/submissions/
SOl:
import bisect
class ExamRoom(object):

    def __init__(self, N):
        """
        :type N: int
        """
        self.N=N
        self.students=[]
        

    def seat(self):
        """
        :rtype: int
        """
        if(len(self.students)==0):
            self.students.append(0)
            return 0
        else:
            prev=self.students[0]
            dist=prev-0
            loc=0
            for i,val in enumerate(self.students):
                if i:
                    if(val-prev)/2>dist:
                        dist=(val-prev)/2
                        loc=dist+prev
                    
                    prev=val
            #print prev
            if(prev==0):
                dist=self.N-1
                loc=self.N-1
            elif(prev!=self.N-1):
                if(self.N-1-prev)>dist:
                    dist=(self.N-1-prev)
                    loc=self.N-1
            
            
            pos=bisect.bisect_left(self.students,loc) 
            self.students.insert(pos,loc)
            #print self.students
            return loc
        
        
        

    def leave(self, p):
        """
        :type p: int
        :rtype: None
        """
        self.students.remove(p)
        


# Your ExamRoom object will be instantiated and called as such:
# obj = ExamRoom(N)
# param_1 = obj.seat()
# obj.leave(p)
