Qus 1 :https://leetcode.com/problems/search-a-2d-matrix/

SOl:
class Solution(object):
    def searchMatrix(self, matrix, target):
        """
        :type matrix: List[List[int]]
        :type target: int
        :rtype: bool
        """
        #time complexity log n*m
        if(len(matrix)==0):
            return 0
        no_of_rows=len(matrix)
        
        
        no_of_cols=len(matrix[0])
        #t is total cells in the matrix
        total_elemnt=no_of_cols*no_of_rows
        
        l=0
        r=total_elemnt-1
        while(l<=r):
            
            #calculate a mid index
            mid=l+(r-l)/2
            
            #find the row of mid elemnt in a matrix
            rows=mid/no_of_cols
            #find the col of mid elemnt in a matrix
            col=mid%no_of_cols
            #now access the mid elemnt value
            mid_el=matrix[rows][col]
            
            if(mid_el==target):
                #if the elemnt val equals target then return true
                return True
            elif(mid_el<target):
                #if mid elemnt val less then target increament l
                l=mid+1
            else:
                r=mid-1
                #if mid elemnt val greater then target decrement r
        #if element not in matrix return False
        return False
            
Qus 2: https://leetcode.com/problems/spiral-matrix/
SOl:
class Solution(object):
    def spiralOrder(self, A):
        """
        :type matrix: List[List[int]]
        :rtype: List[int]
        """
        if(A==[]):
            return []
        n=len(A)
        m=len(A[0])
        
        l=0
        r=m
        t=0
        b=n
        ans=[]
        while(l<r and t<b):
            for i in range(l,r):
                ans.append(A[t][i])
            t+=1
            for i in range(t,b):
                ans.append(A[i][r-1])
            r-=1
            if(t<b):
                for i in range(r-1,l-1,-1):
                    ans.append(A[b-1][i])
                b-=1
            if(l<r):
                for i in range(b-1,t-1,-1):
                    ans.append(A[i][l])
                l+=1
        return ans

        
#         l=0
#         r=m
#         t=0
#         b=n
       
        
#         ans=[]
#         while(l<r and t<b):
            
            
#             for i in range(l,r):
#                 ans.append(A[t][i])
#             t+=1
            
#             for i in range(t,b):
#                 ans.append(A[i][r-1])
#             r-=1
#             if(t<b):
#                 for i in range(r-1,l-1,-1):
#                     ans.append(A[b-1][i])
#                 b-=1
#             if(l<r):
#                 for i in range(b-1,t-1,-1):
#                     ans.append(A[i][l])
#                 l+=1
        
#         return ans
            
                
Qus3: https://leetcode.com/problems/find-the-difference/submissions/
Sol :
class Solution(object):
    def findTheDifference(self, s, t):

        #sol1
        # d={}
        # for i in s:
        #     d[i]=d.get(i,0)+1
        # d1={}
        # for j in t:
        #     d1[j]=d1.get(j,0)+1
        # for i in d1:
        #     if(i not in d or d[i]<d1[i]):
        #         return i
		
		#sol2
        if(len(s)==0):
            return t
        xor=ord(t[0])^ord(t[1])
        for i in s+t[2:]:
            xor=xor^ord(i)
        return chr(xor)
   
