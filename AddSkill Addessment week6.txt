#hackathone question 
Qus : https://www.hackerrank.com/contests/addskill-contest-2/challenges/simple-text-editor
Sol:
stack = ['']
n=int(input())
str1 = ''
for i in range(n):
    a=raw_input().split()
    

    if(a[0]=='1'):
        top=stack[-1]
        stack.append(top+a[1])
    elif(a[0]=='2'):
        top=stack[-1]
        stack.append(top[:-int(a[1])])
    elif(a[0]=='3'):
        top=stack[-1]
        print top[int(a[1])-1]
    elif(a[0]=='4'):
        stack.pop()
Qus 2:https://www.hackerrank.com/contests/addskill-contest-1/challenges/equal-stacks
Sol
#!/bin/python

from __future__ import print_function

import os
import sys

#
# Complete the equalStacks function below.
#
def equalStacks(h1, h2, h3):
    #
    # Write your code here.
    #
    if(h1==[] or h2==[] or h3==[]):
        return 0
    a,b,c=[0]*len(h1),[0]*len(h2),[0]*len(h3)
    a[-1]=h1[-1]
    b[-1]=h2[-1]
    c[-1]=h3[-1]
    for i in range(len(h1)-2,-1,-1):
        a[i]=a[i+1]+h1[i]
    for i in range(len(h2)-2,-1,-1):
        b[i]=b[i+1]+h2[i]
    for i in range(len(h3)-2,-1,-1):
        c[i]=c[i+1]+h3[i]
    s=set()
    for i in a:
        s.add(i)
    s=s.intersection(b)
    s=s.intersection(c)
    if(len(s)==0):
        return 0
    else:
        return max(s)
Qus 3:https://www.hackerrank.com/contests/addskill-contest-1/challenges/gridland-metro/submissions/code/1321835168
Sol:
def gridlandMetro(n, m, k, track):
    
    if(m==0 or n==0 ):
        return 0
    if(k==0):
        return m*n
    count=m*n;
    d={};
    for i in track:
        if i[0] not in d:
            d[i[0]]=[i[1],i[2]];
        else:
            if(max(d[i[0]])<i[1]):
                count+=(i[1]-max(d[i[0]])-1)
            if(min(d[i[0]])>i[2]):
                count+=(min(d[i[0]])-i[2]-1)
            d[i[0]].extend([i[1],i[2]]);
    for i in d:

        count -=(max(d[i])-min(d[i]))+1;
        
    return count if count > 0 else 0;

Qu 4:https://www.hackerrank.com/contests/addskill-contest-1/challenges/sherlock-and-array/submissions/code/1321823564
Sol:
def balancedSums(arr):
    pre=[0]*len(arr)
    post=[0]*len(arr)
    pre[0]=arr[0]
    post[-1]=arr[-1]
    for i in range(1,len(arr)):
        pre[i]=pre[i-1]+arr[i]
    for i in range(len(arr)-2,-1,-1):
        post[i]=post[i+1]+arr[i]
    print pre,post
    for i in range(len(arr)):
        if(pre[i]==post[i]):
            return "YES"
    return "NO"

Qus5:https://www.hackerrank.com/contests/addskill-contest-1/challenges/fraudulent-activity-notifications
Sol:need optimal solution
import bisect
# Complete the activityNotifications function below.
def activityNotifications(expenditure, d):
    def getMedian(a,d):
        if(d%2==0):
            return ((a[d/2]+a[d/2+1])+0.0)/2.0
        else:
            return a[d/2]
        
    
    def willNotify(cur,i,expenditure):
        if(expenditure[i]>=2*getMedian(cur,d)):
            print getMedian(cur,d)
            return 1
        return 0
        
    
    
    
    notification=0
    cur=[]
    for i in range(len(expenditure)):
        if(i<d):
            bisect.insort_left(cur,expenditure[i])
        else:
            ans=willNotify(cur,i,expenditure)
            if(ans==1):
                print cur,i
            notification+=ans
            bisect.insort_left(cur,expenditure[i])
            cur.remove(expenditure[i-d])
    return notification

Qus :https://www.hackerrank.com/contests/addskill-contest-1/challenges/sherlock-and-anagrams
Sol:Pending






Qus 6:
Sol:
class Solution(object):
    def isValidSerialization(self, preorder):
        """
        :type preorder: str
        :rtype: bool
        """
        preorder=preorder.split(',')
        #print preorder
        valid=1
        for i in range(0,len(preorder),1):
            valid-=1
           
            if(preorder[i]=='#' and valid==0 and i<len(preorder)-1):
                return False
            if(preorder[i]!='#'):
                valid+=2
        return valid==0

        #sol O(n) space O(n) time complexity
#         preorder=preorder.split(',')
#         c=preorder.count('#')
        
#         if(c>len(preorder)-c ):

#             # only '#' is still a vaild case
#             valid=1
#             for i in range(len(preorder)):

#                 valid-=1
                  #visiting node reduces 1 choice out of current choices
#                 #incase there are more node to be visited and 
#                 #we have no more choice to add so we return false
#                 if(preorder[i]=='#' and valid==0 and i<len(preorder)-1):
#                     return False
                    
#                 if(preorder[i]!="#"):
                      #after visiting every node which is not null we get 2 more choices 
#                     valid+=2                
#             if(valid==0):
#                 return True
#         else:
#             return False

Qus 7:https://leetcode.com/problems/maximum-product-of-word-lengths/submissions/
Sol:

class Solution(object):
    def maxProduct(self, words):
        """
        :type words: List[str]
        :rtype: int
        """
        #sol 4 
        #95% efficient
        max1=0
        d={}
        for i in range(len(words)):
            mask=0
            for j in (set(words[i])):
                mask|=(1<<(ord(j)-97))
            d[mask]=max(d.get(mask,0),len(words[i]))
        for i in d:
            for j in d:
                if(i&j==0):
                    max1=max(max1,d.get(i)*d.get(j))

        return max1

        # 26-bits: store distinct letters
        #correct solution 
#         max1=0
#         v=[0]*len(words)
#         for i in range(len(words)):
#             for j in (set(words[i])):
#                 v[i]|=(1<<(ord(j)-97))
#             for j in range(i-1,-1,-1):
#                 if(v[i]&v[j]==0):
#                     max1=max(max1,len(words[i]*len(words[j])))
            

#         return max1

        #we dont need to check previus elemnt 
        #148 test case pases
#         max1=0
#         o=[]
#         for i in set(words):
#             a=[0]*26
#             for j in i:
#                 a[ord(j)-97]=1
#             o.append(a)
        
#         for i in range(len(o)):
#             for j in range(i+1,len(o)):
               
#                 for k,l in zip(o[i],o[j]):
#                     if(k&l):
#                         break
#                 else:
#                     max1=max(len(words[i])*len(words[j]),max1)
#         return max1
                
        #2nd sol TLE
        #69 test case passes
#         max1=0
#         o=[]
#         for i in words:
#             a=[0]*26
#             for j in i:
#                 a[ord(j)-97]=1
#             o.append(a)
        
#         for i in range(len(o)):
#             for j in range(len(o)):
#                 if(i!=j):
#                     for k,l in zip(o[i],o[j]):
#                         if(k&l):
#                             break
#                     else:
#                         max1=max(len(words[i])*len(words[j]),max1)
#         return max1
                

        #solution :TLE
        # max1=0
        # for i in words:
        #     for j in words[1+1:]:
        #         if(i!=j):
        #             a=set(list(i))
        #             b=set(list(j))
        #             #print a,b
        #             if(a.intersection(b)==set()):
        #                 max1=max(max1,len(i)*len(j))
        # return max1
                        
Qus 8:https://leetcode.com/problems/product-of-array-except-self/solution/
Sol: #we can do O(1) space see leetcode solution
class Solution(object):
    def productExceptSelf(self, nums):
        """
        :type nums: List[int]
        :rtype: List[int]
        """

        
       
        #O(n) space without division
        if(len(nums)==0):
            return []
        if(len(nums)==1):
            return [0]
        l=[nums[0]]
        r=[0]*len(nums)
        r[-1]=nums[-1]
        ans=[]
        for i in range(1,len(nums)):
            l.append(l[-1]*nums[i])
        for j in range(len(nums)-2,-1,-1):
            r[j]=r[j+1]*nums[j]
        ans.append(r[1])
        for i in range(1,len(nums)-1):
            ans.append(l[i-1]*r[i+1])
        ans.append(l[len(nums)-2])
            
        return ans
		
Qus 9:https://leetcode.com/problems/next-permutation/
Sol:
class Solution(object):
    def nextPermutation(self, nums):
        """
        :type nums: List[int]
        :rtype: None Do not return anything, modify nums in-place instead.
        """
        if(nums==sorted(nums,reverse=True)):
            nums.sort()
            return 
        def rev(i,nums):
            stack=[]
            for j in range(i,len(nums)):
                stack.append(nums[j])
            print stack
            
            for j in range(i,len(nums)):
                nums[j]=stack.pop()
                


        def swap(k,nums,j):
           
            while(j<len(nums) and nums[j]>nums[k]):
                j=j+1
            nums[j-1],nums[k]=nums[k],nums[j-1]

        i=len(nums)-1
        while(True):
            if(nums[i-1]<nums[i]):
                #we need to swap val from the end which is < then val+1 with elemnt                  
				#which is just greater then val (in right)
                swap(i-1,nums,i)
                #becuase we need just greater element 
                rev(i,nums)
                break
            i-=1
        return 
 -------
 
 Qus 10:https://leetcode.com/problems/remove-duplicate-letters/submissions/
 Sol:
from collections import defaultdict
class Solution(object):
    def removeDuplicateLetters(self, s):
        """
        :type s: str
        :rtype: str
        """
        #this dict will store all the frequency of char
        #it will help to keep track how many frequency of char at a given time
        d=defaultdict(int)
        for i in s:
            d[i]+=1
        out=[]
        v={}
        for i in s:
            d[i]-=1
            if(v.get(i,None)==None):
                #remove elemnts until new elemnt greater then every elemnt in front 
                #if elemnt is already visited then ignore 
                #i am decrementing d[i] to keep track 
                #is there any more elemnt with same val
                while(len(out)>0 and out[-1]>i and d[out[-1]]>0):
                    el=out.pop()
                    del v[el]
                out.append(i)
                v[i]=True
            #print out
            
        return "".join(out)
		
Qus 11:
Sol: