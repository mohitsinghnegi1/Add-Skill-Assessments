--(1st Assessment 1/16/2020)--

how the source code is built and executed
o In computing, source code is any collection of code, possibly with comments
o written using a human-readable programming language, usually as plain text
o The source code is often transformed by an assembler or compiler into binary machine code that can be executed by the computer.
o Assembler transform high level code ie. human readable into low level code  or machine code  line by line . it immediately stops when first error/exception occurs .ex Python
o Compiler transform high level code to low level code for different machine . It generally takes less time in executing  code . ex java ,C++
o In Python, the source code is compiled into a much simpler form called bytecode.
o These are instructions similar in spirit to CPU instructions, but instead of being executed by the CPU, they are executed by software called a virtual machine
o This is different than Java, for example, where you have to run the Java compiler to turn Java source code into compiled class files. 
o For this reason, Java is often called a compiled language, while Python is called an interpreted language. 
o But both compile to bytecode, and then both execute the bytecode with a software implementation of a virtual machine.

Compilation and Execution of a Java Program
o Java, being a platform independent programming language, doesn’t work on one-step-compilation. Instead, it involves a two-step execution,
o Compilation :First, the source ‘.java’ file is passed through the compiler, which then encodes the source code into a machine independent encoding, known as Bytecode
o The content of each class contained in the source file is stored in a separate ‘.class’ file
o Execution :The class files generated by the compiler are independent of the machine or the OS, which allows them to be run on any system
o To run, the main class file (the class that contains the method main) is passed to the JVM
o source code - java compiler(javac)-> bytecode ->(class loader-bytecode verifyer - JIT compiler)->native machine code
o Due to the two-step execution process described above, a java program is independent of the target operating system. 
o However, because of the same, othe execution time is way more than a similar program written in a compiled platform-dependent program

Memory management in python
o everything is object in python eg type(x) <class 'int'>
o (reference)x=1(object)
o there are two part in memory first is stack and other is heap . stack store reference eg. x  and heap store object  eg .1
o https://www.google.com/search?rlz=1C1CHBD_enIN863IN863&sxsrf=ACYBGNTjU5KoFVVzJrGNeExloV8kZSzYYw%3A1581800101112&ei=pVpIXtC8Bvib4-EP7d-XgAw&q=Study+how+memory+management+works+in+python&oq=Study+how+memory+management+works+in+python&gs_l=psy-ab.3...3694.4905..5571...0.1..0.249.1013.0j4j2......0....1..gws-wiz.......0i71j33i22i29i30.X1VfG5EqwTg&ved=0ahUKEwiQo4fJuNTnAhX4zTgGHe3vBcAQ4dUDCAs&uact=5#kpvalbx=_s1pIXoXOHouf4-EPsbCuoAo29
o Summary :the method and variable are created in stack memory 
o the object and instance are created in heap memory
o A new stack frame is created on invocation of new method/function
o stack frames are destroyed as soon as function \method returns
o garbage collector is a mechanism to clean up dead object periodically

Dutch flag problem





